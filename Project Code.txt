import pandas
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import os 
folder = os.path.join('/content/drive/My Drive/SER')
from google.colab import drive
drive.mount('/content/gdrive')
import pandas as pd
import os
import librosa
import glob
import numpy as np
lst = np.array([])
labels = []
i=0
#print(int("03-01-01-01-02-02-01.wav"[7:8])-1)
shapes = []
bookmark=0
files=[]
s_arr = np.zeros((1440,13,216))
for file in glob.glob("/content/gdrive/My Drive/SER/Actor_*/*.wav"):
        X, sample_rate = librosa.load(file, res_type='kaiser_fast',duration=2.5,sr=22050*2,offset=0.5)
        sample_rate = np.array(sample_rate)
        mfccs = librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=13)
        files.append(file)
        result = np.zeros((13,216))
        result[:mfccs.shape[0],:mfccs.shape[1]] = mfccs
        #print(result)
        s_arr[i] = result
        
        file=file[38:]
        #print(file)
        file = int(file[7:8])-1
        if file>0:
          file-=1
        i+=1
        labels.append(file)
labels = np.array(labels)
ravdess_X = s_arr
ravdess_y = labels
# np.save('ravdess_X.npy',ravdess_X)
# np.save('ravdess_y.npy',ravdess_y)
ravdess_X.shape
from sklearn.utils import shuffle
ravdess_train_X, ravdess_train_y = shuffle(ravdess_X, ravdess_y, random_state=42)

ravdess_X = np.expand_dims(ravdess_X,axis=3)
ravdess_X
from sklearn.model_selection import train_test_split
ravdess_train_X, ravdess_valid_X, ravdess_train_y, ravdess_valid_y  = train_test_split(ravdess_X,ravdess_y,test_size=0.2,random_state=42)

from sklearn.utils.class_weight import compute_class_weight
class_weights = compute_class_weight(
                                        class_weight = "balanced",
                                        classes = np.unique(ravdess_train_y),
                                        y = ravdess_train_y                                                    
                                    )
class_weights = dict(zip(np.unique(ravdess_train_y), class_weights)),

import matplotlib.pyplot as plt
import seaborn as sns



sns.distplot(ravdess_X[1]);
import librosa.display
file_path0 = '/'+files[0]


X0, sample_rate0 = librosa.load(file_path0, res_type='kaiser_fast',duration=2.5,sr=22050*2,offset=0.5)
sample_rate0 = np.array(sample_rate0)
mfcc0 = librosa.feature.mfcc(y=X0, sr=sample_rate0, n_mfcc=13)

#n_fft = 2048
#hop_length = 512
#n_mels = 128
n_fft = 2048
hop_length = 512
n_mels = 200
S0 = librosa.feature.melspectrogram(X0, sr=sample_rate0, n_fft=n_fft, hop_length=hop_length, n_mels=n_mels)
S_DB0 = librosa.power_to_db(S0, ref=np.max)

# audio wave
plt.figure(figsize=(15, 20))

plt.subplot(4,1,1)
#plt.legend(loc="upper right")
plt.ylabel('Disgust - Amplitude')
librosa.display.waveplot(X0, sr=sample_rate0)
#plt.title('Audio sampled at 44100 hrz')

plt.subplot(4,1,2)
#plt.legend(loc="upper right")
librosa.display.specshow(mfcc0, x_axis='time')
plt.colorbar()
plt.ylabel('Disgust - MFCC')

plt.subplot(4,1,3)
librosa.display.specshow(S_DB0, sr=sample_rate0, hop_length=hop_length, x_axis='time', y_axis='mel');
plt.colorbar(format='%+2.0f dB');
plt.ylabel('Disgust - Hz')

import keras
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding
from tensorflow.keras.utils import to_categorical
from keras.layers import Input, Flatten, Dropout, Activation, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D, LSTM, Lambda
from keras.models import Model
from keras.callbacks import ModelCheckpoint
from sklearn.model_selection import train_test_split
from keras import backend as K
from tensorflow.keras.utils import plot_model
model_ravdess = Sequential()
kernel = 5
model_ravdess.add(Conv2D(32, 5,strides=2,padding='same',
                 input_shape=(13,216,1)))
model_ravdess.add(Activation('relu'))
model_ravdess.add(BatchNormalization())

# model_ravdess.add(MaxPooling1D(pool_size=(8)))
model_ravdess.add(Conv2D(64, 5,strides=2,padding='same',))
model_ravdess.add(Activation('relu'))
model_ravdess.add(BatchNormalization())

model_ravdess.add(Conv2D(64, 5,strides=2,padding='same',))
model_ravdess.add(Activation('relu'))
model_ravdess.add(BatchNormalization())
# model_ravdess.add(MaxPooling2D(pool_size=(2,3)))
# model_ravdess.add(Lambda(lambda x: K.squeeze(x, axis= 1)))
model_ravdess.add(Flatten())

# model_ravdess.add(LSTM(16))
# model_ravdess.add(Dropout(0.5))

model_ravdess.add(Dense(7))
model_ravdess.add(Activation('softmax'))
# opt = keras.optimizers.rmsprop(lr=0.00005, rho=0.9, epsilon=None, decay=0.0)

model_ravdess.summary()
plot_model(model_ravdess, show_shapes=True,dpi = 65)
opt = tf.keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)

model_ravdess.compile(loss='sparse_categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])
ravdess_train_X.shape, ravdess_train_y.shape
cnnhistory=model_ravdess.fit(ravdess_X, ravdess_y, batch_size=16, epochs=10, validation_data=None)
model_ravdess.evaluate(ravdess_valid_X,ravdess_valid_y)
predict_x = model_ravdess.predict(ravdess_valid_X)
classes_x=np.argmax(predict_x,axis=1)
print(classes_x)

classes = ['Neutral','Happy','Sad','Angry','Fearful','Disgust','Surprise']
for i in range(len(classes_x)):
  print(classes[classes_x[i]], '     ',classes[ravdess_valid_y[i]])
 
 from sklearn.metrics import confusion_matrix
d=confusion_matrix(classes_x, ravdess_valid_y)
d

df_cm = pd.DataFrame(d, columns=np.unique(classes_x), index = np.unique(classes_x))
df_cm.index.name = 'Actual'
df_cm.columns.name = 'Predicted'
plt.figure(figsize = (10,7))
sns.set(font_scale=1.4)#for label size
sns.axes_style("whitegrid")
sns.heatmap(df_cm, cmap="Blues", annot=True,annot_kws={"size": 16})# font size2
